// "hello world"
wf := import("@platforma-sdk/workflow-tengo:workflow")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets:= import("@platforma-sdk/workflow-tengo:assets")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
text := import("text")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
pSpec := import("@platforma-sdk/workflow-tengo:pframes.spec")
ll := import("@platforma-sdk/workflow-tengo:ll")

pfClustersConv := import(":pf-clusters-conv")
pfUMAPConv := import(":pf-umap-conv")
pfTSNEConv := import(":pf-tsne-conv")
pfMetricsConv := import(":pf-metrics-conv")
json := import("json")

wf.prepare(func(args) {

	clonotypingRunId := args.clonotypingRunId
	dataType := args.dataType
	chain := args.chain
	receptor := args.receptor
	
	// Get Pcolumns matching the specified values
	query := func(label) {
		axisMatcher := []
		// define elements to search in domain sections
		domain := {
					"pl7.app/alphabet": "aminoacid",
					"pl7.app/vdj/feature": "CDR3"
					}
		if (dataType == "singleCell") || (dataType == "scFv") {
			domain["pl7.app/vdj/scClonotypeChain/index"] = "primary"
		} 

		// define whole query 
		r := {
			type: "And",
			operands:  [
				// Exact match in annotation field
				{
					type: "Annotation",
					annotation: "pl7.app/label",
					value: label
				},
				// Exact match in elements defined before in domain fields
				{
					type: "Domain",
					domain: domain,
					domainExactMatch: false
				}
			]
		}

		if dataType == "bulk" {
			// we have to create an axes key matcher
			axisMatcher = [{
							type: "AxesKeys",
							axesKeys: [
								{
								name: "pl7.app/vdj/clonotypeKey",
								domain: {"pl7.app/vdj/chain": chain,
										"pl7.app/vdj/clonotypingRunId": clonotypingRunId},
								domainExactMatch: false
								}
							],
							partialMatch: true  // true allows subset of axes to match
							}]
		} else if (dataType == "singleCell") || (dataType == "scFv") {
			// we have to create an axes key matcher
			axisMatcher = [{
							type: "AxesKeys",
							axesKeys: [
								{
								name: "pl7.app/vdj/scClonotypeKey",
								domain: {"pl7.app/vdj/receptor": receptor,
										"pl7.app/vdj/clonotypingRunId": clonotypingRunId},
								domainExactMatch: false
								}
							],
							partialMatch: true  // true allows subset of axes to match
							}]
		} 
		r["operands"] = r["operands"] + axisMatcher

		return r
	}
	
	ops := {
		single: true
	}

	// ll := import("@platforma-sdk/workflow-tengo:ll")
	// maps := import("@platforma-sdk/workflow-tengo:maps")
	// ll.panic("%v", query("Heavy CDR3 aa"))

	// Defined different returns for single-cell and bulk 
	if dataType == "singleCell" {
		// In single-cell datasets have info for both chains and user can 
		// define specific chain or both
		outputs := {}
		if chain == "Both chains" {
				outputs["selectedChains1"] = wf.query(query("Heavy CDR3 aa Primary"), ops) 
				outputs["selectedChains2"] = wf.query(query("Light CDR3 aa Primary"), ops)
		} else {
			outputs["selectedChains"] = wf.query(query(chain), ops) 
		}
		return  outputs

	} else if dataType == "scFv" {
		// In scFv datasets datasets have info for both chains and user can 
		// define specific chain or both
		outputs := {}
		if chain == "Both chains" {
				outputs["selectedChains1"] = wf.query(query("Heavy CDR3 aa"), ops) 
				outputs["selectedChains2"] = wf.query(query("Light CDR3 aa"), ops)
		} else {
			outputs["selectedChains"] = wf.query(query(chain), ops) 
		}
		return  outputs

	} else if dataType == "bulk" {
		// In bulk datasets usually are split by chain and users main 
		// selection already indicates it
		return  { 
			selectedChains: wf.query(query("CDR3 aa"), ops)
		}
	} 
})

wf.body(func(args) {
	clonotypingRunId := args.clonotypingRunId
	chain := args.chain
	dataType := args.dataType
	metric := args.metric
	resolution := args.resolution

	// Convert chain selection to Pframe
	selectedChainsPf := []
	selectedChainsSpec := []
	if dataType == "bulk" {
		selectedChainsPf = [args.selectedChains]
		selectedChainsSpec = [args.selectedChains.spec]

		
	} else {
		if chain == "Both chains" {
			selectedChainsPf = [args.selectedChains1, args.selectedChains2]
			selectedChainsSpec = [args.selectedChains1.spec, args.selectedChains2.spec]
		} else {
			selectedChainsPf = [args.selectedChains]
			selectedChainsSpec = [args.selectedChains.spec]
			
		}
	}

	// define chain variable for python script
	chainPy := ""
	if chain == "Both chains" {
		chainPy = "both"
	} else {
		// lowerChain := text.to_lower(chain)
		// if (text.contains(lowerChain, "heavy")) 
		if (chain == "Heavy CDR3 aa") || (chain == "Heavy CDR3 aa Primary") || (chain == "IGHeavy") {
			chainPy = "heavy"
		} else if (chain == "Light CDR3 aa") || (chain == "Light CDR3 aa Primary") || (chain == "IGLight") {
			chainPy = "light"
		} else {
			ll.panic("%v", "ERROR: MiXCR specs might have changed and chain annotation values do not match reference: Heavy/Light CDR3 aa, Heavy/Light CDR3 aa Primary or IG Heavy/Light. Input was ", chain)
		}
	}

	// Make a copy of one of the specs and fill it with more data
	combinedSpec := copy(selectedChainsSpec[0])

	// For SC and scFv we can have multiple scClonotypeChain values clustered
	if (dataType == "singleCell") || (dataType == "scFv") {
		// we assume the possibility of having concatenated multiple chains from same index
		if len(selectedChainsSpec) > 1 {
			tempLabel := []
			for s in selectedChainsSpec{
				tempLabel = tempLabel + [s.domain["pl7.app/vdj/scClonotypeChain"]]
			}
			combinedSpec.domain["pl7.app/vdj/scClonotypeChain"] = string(json.encode(copy(tempLabel)))
		} else {
			combinedSpec.domain["pl7.app/vdj/scClonotypeChain"] = string(json.encode([combinedSpec.domain["pl7.app/vdj/scClonotypeChain"]]))
		}
	}
	
	csv := xsv.exportFrame(selectedChainsPf, "csv", {})

	// get sequence ID labels (future column names)
	sequenceIds := []
	for pcol in selectedChainsPf {
		sequenceIds = sequenceIds + [pcol.spec.annotations["pl7.app/label"]]
	}

	clonotypeClustering := exec.builder().
		software(assets.importSoftware("@platforma-open/milaboratories.clonotype-clustering.software:clonotype-clustering")).
		addFile("input.csv", csv).
		arg("--input").arg("input.csv").
		arg("--seq_column").arg(string(sequenceIds)).
		arg("--output_clusters").arg("clusters.csv").
		arg("--output_umap").arg("umap.csv").
		arg("--output_tsne").arg("tsne.csv").
		arg("--metric").arg(metric).
		arg("--resolution").arg(string(resolution)).
		arg("--chain").arg(string(chainPy)).
		saveFile("clusters.csv").
		saveFile("umap.csv").
		// saveFile("tsne.csv").
		saveFile("cluster_summary_metrics.csv").
		printErrStreamToStdout().
		saveStdoutContent().
		cache(24 * 60 * 60 * 1000).
		run()

	clustersImportParams := pfClustersConv.getColumns(combinedSpec, resolution, metric)
	clustersPf := xsv.importFile(clonotypeClustering.getFile("clusters.csv"), "csv", clustersImportParams)

	UMAPImportParams := pfUMAPConv.getColumns(combinedSpec, metric)
	UMAPPf := xsv.importFile(clonotypeClustering.getFile("umap.csv"), "csv", UMAPImportParams)

	// TSNEImportParams := pfTSNEConv.getColumns(combinedSpec, metric)
	// TSNEPf := xsv.importFile(clonotypeClustering.getFile("tsne.csv"), "csv", TSNEImportParams)

	metricsImportParams := pfMetricsConv.getColumns(combinedSpec, metric)
	metricsPf := xsv.importFile(clonotypeClustering.getFile("cluster_summary_metrics.csv"), "csv", metricsImportParams)

	return {
		outputs: {
			clustersPf: pframes.exportFrame(clustersPf),
			UMAPPf: pframes.exportFrame(UMAPPf),
			metricsPf: pframes.exportFrame(metricsPf)
		},
		exports: {
			clustersPf: {
				spec: clustersPf["clonotypeCluster.spec"],
				data: clustersPf["clonotypeCluster.data"]
			}
		}
	}
})

